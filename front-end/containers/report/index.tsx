import Head from 'next/head';
import { TITLE, FORM_STEP } from '../../utils/constants';
import {
  SolarIrradianceByMonth,
  SolarIrradianceByWeek,
  OptimalSolarRecommendation,
  // PotentialSolarGenerationInYourRegion,
} from '../../components/bar-chart';
import {
  Card,
  CardHeader,
  CardContent,
  IconButton,
  Box,
  Paper,
  Container,
  Typography,
  TableContainer,
  Table,
  TableBody,
  TableRow,
  TableCell,
  TableHead,
  Tabs,
  Tab,
} from '@mui/material';
import InfoIcon from '@mui/icons-material/Info';
import CircularProgress from '@mui/material/CircularProgress';
import { SecondaryHeader } from '../../components/header';
import React, { useEffect } from 'react';
import { TabPanel } from '../../components/tab-panel';
import { AlertDialog } from '../../components/dialog';
import { fetchData } from '../../api/fetch-data';
import { GeographicCoordinate } from '../../utils/interface';

interface Props {
  address: string;
  provider: string;
  averageBill: string;
  duration: number;
  coordinate: GeographicCoordinate;
}

interface EventProps {
  setStep: (step) => void;
}

const Report = (props: Props & EventProps) => {
  const [loading, setLoading] = React.useState(false);
  const [data, setData] = React.useState(null);
  const [tabIndex, setTabIndex] = React.useState(0);
  const [openDialog, setOpenDialog] = React.useState(false);
  const { address, provider, averageBill, duration, coordinate } = props;

  const handleBack = () => {
    const { setStep } = props;
    setStep(FORM_STEP.FIRST);
  };

  const toFixed2 = (num) => Number(num.toFixed(2));
  const toDolar = (val) =>
    val.toLocaleString('en-US', {
      style: 'currency',
      currency: 'USD',
    });

  useEffect(() => {
    window.scrollTo(0, 0);
    async function getData() {
      setLoading(true);

      const { lat, lng } = coordinate;
      const monthlybill = parseFloat(averageBill);

      const data = await fetchData({
        lat,
        lng,
        provider,
        monthlybill,
        duration: parseInt(duration.toString()),
      });

      setData(data);
      setLoading(false);
    }
    getData();
  }, []); // eslint-disable-line react-hooks/exhaustive-deps

  const handleChangeTab = (event: React.SyntheticEvent, newValue: number) => {
    setTabIndex(newValue);
  };

  const handleOpenDialog = () => {
    setOpenDialog(true);
  };

  return (
    <div>
      <Head>
        <title>{TITLE}</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <SecondaryHeader onClick={handleBack} />
      <Container maxWidth="md" component="main" sx={{ my: 4 }}>
        {loading && (
          <Box sx={{ textAlign: 'center' }}>
            <CircularProgress />
          </Box>
        )}

        {data && (
          <Paper elevation={0}>
            <Box sx={{ border: 1, borderRadius: 1, borderColor: '#dadce0' }}>
              <Card>
                <CardHeader
                  title={
                    <Typography component="p" sx={{ textTransform: 'uppercase' }}>
                      What we know about you
                    </Typography>
                  }
                />
                <CardContent sx={{ textAlign: 'center' }}>
                  <TableContainer>
                    <Table>
                      <TableBody>
                        <TableRow>
                          <TableCell>
                            <Typography variant="h6" component="h6">
                              Location
                            </Typography>
                          </TableCell>
                          <TableCell align="right">
                            <Typography variant="body1" component="p">
                              {address}
                            </Typography>
                          </TableCell>
                        </TableRow>

                        <TableRow>
                          <TableCell>
                            <Typography variant="h6" component="h6">
                              Solar provider
                            </Typography>
                          </TableCell>
                          <TableCell align="right">
                            <Typography variant="body1" component="p">
                              {provider.toUpperCase()}
                            </Typography>
                          </TableCell>
                        </TableRow>

                        <TableRow>
                          <TableCell>
                            <Typography variant="h6" component="h6">
                              Average monthly electric bill
                            </Typography>
                          </TableCell>
                          <TableCell align="right">
                            <Typography variant="body1" component="p">
                              {toDolar(parseFloat(averageBill) || 0)}
                            </Typography>
                          </TableCell>
                        </TableRow>
                      </TableBody>
                    </Table>
                  </TableContainer>
                </CardContent>
              </Card>
            </Box>

            <Box sx={{ border: 1, borderRadius: 1, borderColor: '#dadce0', mt: 2 }}>
              <Card>
                <CardHeader
                  title={
                    <Typography component="p" sx={{ textTransform: 'uppercase' }}>
                      Setup to cover your needs
                    </Typography>
                  }
                />
                <CardContent sx={{ textAlign: 'center' }}>
                  <TableContainer>
                    <Table>
                      <TableBody>
                        <TableRow>
                          <TableCell>
                            <Typography variant="h6" component="h6">
                              Solar panel area
                            </Typography>
                          </TableCell>
                          <TableCell align="right">
                            <Typography variant="body1" component="p">
                              {toFixed2(data.config.totalPanelSize)}m<sup>2</sup>
                            </Typography>
                          </TableCell>
                        </TableRow>

                        <TableRow>
                          <TableCell>
                            <Typography variant="h6" component="h6">
                              Number of solar panels
                            </Typography>
                          </TableCell>
                          <TableCell align="right">
                            <Typography variant="body1" component="p">
                              {toFixed2(data.config.recommendedPanelPerMonth)}
                            </Typography>
                          </TableCell>
                        </TableRow>

                        <TableRow>
                          <TableCell>
                            <Typography variant="h6" component="h6">
                              Cost
                            </Typography>
                          </TableCell>
                          <TableCell align="right">
                            <Typography variant="body1" component="p">
                              {toDolar(data.config.cost)}
                            </Typography>
                          </TableCell>
                        </TableRow>

                        <TableRow>
                          <TableCell>
                            <Typography variant="h6" component="h6">
                              Maintenance
                            </Typography>
                            <Typography variant="subtitle1" component="span">
                              Once every year
                            </Typography>
                          </TableCell>
                          <TableCell align="right">
                            <Typography variant="body1" component="p">
                              {toDolar(data.config.maintenance)}
                            </Typography>
                          </TableCell>
                        </TableRow>

                        <TableRow>
                          <TableCell>
                            <Typography variant="h6" component="h6">
                              Net saving
                            </Typography>
                          </TableCell>
                          <TableCell align="right">
                            <Typography variant="body1" component="p">
                              {toDolar(data.config.totalSaving)}
                            </Typography>
                          </TableCell>
                        </TableRow>

                        <TableRow>
                          <TableCell>
                            <Typography variant="h6" component="h6">
                              Break-even
                            </Typography>
                          </TableCell>
                          <TableCell align="right">
                            <Typography variant="body1" component="p">
                              {parseInt(data.config.breakEvenInYear)} year(s)
                            </Typography>
                          </TableCell>
                        </TableRow>
                      </TableBody>
                    </Table>
                  </TableContainer>
                </CardContent>
              </Card>
            </Box>

            <Box sx={{ border: 1, borderRadius: 1, borderColor: '#dadce0', mt: 2 }}>
              <Card>
                <CardHeader
                  title={
                    <Typography component="p" sx={{ textTransform: 'uppercase' }}>
                      Sunshine in your area
                    </Typography>
                  }
                />
                <Tabs value={tabIndex} onChange={handleChangeTab}>
                  <Tab label="By Month" />
                  <Tab label="By Week" />
                </Tabs>

                <TabPanel value={tabIndex} index={0}>
                  <Card>
                    <CardContent>
                      <SolarIrradianceByMonth lat={coordinate.lat} lng={coordinate.lng} />
                    </CardContent>
                  </Card>
                </TabPanel>

                <TabPanel value={tabIndex} index={1}>
                  <Card>
                    <CardContent>
                      <SolarIrradianceByWeek lat={coordinate.lat} lng={coordinate.lng} />
                    </CardContent>
                  </Card>
                </TabPanel>
              </Card>
            </Box>

            <Box sx={{ border: 1, borderRadius: 1, borderColor: '#dadce0', mt: 2 }}>
              <Card>
                <CardHeader
                  title={
                    <Typography component="p" sx={{ textTransform: 'uppercase' }}>
                      Optimal Solar Recommendation
                    </Typography>
                  }
                />
                <CardContent>
                  <OptimalSolarRecommendation lat={coordinate.lat} lng={coordinate.lng} />
                </CardContent>
              </Card>
            </Box>

            <Box sx={{ border: 1, borderRadius: 1, borderColor: '#dadce0', mt: 2 }}>
              <Card>
                <CardHeader
                  action={
                    <IconButton onClick={handleOpenDialog}>
                      <InfoIcon />
                    </IconButton>
                  }
                  title={
                    <Typography component="p" sx={{ textTransform: 'uppercase' }}>
                      Recommended angle setup
                    </Typography>
                  }
                />
                <CardContent sx={{ textAlign: 'center' }}>
                  <TableContainer>
                    <Table>
                      <TableHead>
                        <TableRow>
                          <TableCell>Month</TableCell>
                          <TableCell align="right">Angle</TableCell>
                          <TableCell align="right">Orientation</TableCell>
                        </TableRow>
                      </TableHead>
                      <TableBody>
                        {data.recommends.map((item, index) => {
                          return (
                            <TableRow key={index}>
                              <TableCell>
                                <Typography variant="body1" component="p">
                                  {item.month}
                                </Typography>
                              </TableCell>
                              <TableCell align="right">
                                <Typography variant="body1" component="p">
                                  {item.angle}
                                </Typography>
                              </TableCell>
                              <TableCell align="right">
                                <Typography variant="body1" component="p">
                                  {item.orientation === 'N' ? 'North' : 'South'}
                                </Typography>
                              </TableCell>
                            </TableRow>
                          );
                        })}
                      </TableBody>
                    </Table>
                  </TableContainer>
                </CardContent>
              </Card>
            </Box>

            {/* <Box sx={{ border: 1, borderRadius: 1, borderColor: '#dadce0', mt: 2 }}>
            <Card>
              <CardHeader
                title={
                  <Typography component="p" sx={{ textTransform: 'uppercase' }}>
                    Potential Solar Generation In The Region
                  </Typography>
                }
              />
              <CardContent>
                <PotentialSolarGenerationInYourRegion />
              </CardContent>
            </Card>
          </Box> */}
          </Paper>
        )}
      </Container>
      <AlertDialog open={openDialog} setOpen={setOpenDialog} />
    </div>
  );
};

export { Report };
