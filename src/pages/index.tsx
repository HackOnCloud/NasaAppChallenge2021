import { useEffect, useState } from 'react';
import Head from 'next/head';
import Image from 'next/image';
import { useTheme } from '@mui/material/styles';
import useMediaQuery from '@mui/material/useMediaQuery';
import styles from '../styles/Home.module.css';
// import { API_KEY } from '../utils/constants';
import { COUNTRIES, SOLAR_PANEL_PROVIDERS, PANEL_PROVIDER } from '../utils/constants';
import {
  Button,
  Box,
  CardContent,
  CardActions,
  TextField,
  Grid,
  Paper,
  InputAdornment,
  Typography,
  InputLabel,
  Select,
  MenuItem,
  FormControl,
  Container,
  FormHelperText,
} from '@mui/material';
import type { TextFieldProps } from '@mui/material';
import type { NextPage } from 'next';
import { loadAsyncScript } from '../utils/load-script';

const Home: NextPage = () => {
  const [autoComplete, setAutoComplete] = useState(null);
  const [country, setCountry] = useState('');
  const [retailer, setRetailer] = useState('');
  const [postalCode, setPostalCode] = useState(undefined);

  const addressId = 'address';
  const inputProps: TextFieldProps = {
    required: true,
    fullWidth: true,
    variant: 'outlined',
    size: 'small',
  };

  useEffect(() => {
    loadAsyncScript(`https://maps.googleapis.com/maps/api/js?key=&libraries=places`, () => {
      if (window.google) {
        const input = document.getElementById(addressId) as HTMLInputElement;

        const options = {
          fields: ['formatted_address', 'geometry', 'name'],
          strictBounds: false,
          types: ['establishment'],
        };
        const autocomplete = new google.maps.places.Autocomplete(input, options);
        setAutoComplete(autocomplete);

        autocomplete.addListener('place_changed', () => {
          console.log('asdasd', autocomplete.getPlace());
        });
      }
    })
  }, []);

  const theme = useTheme();
  const isAboveSm = useMediaQuery(theme.breakpoints.up('sm'));

  const handleChangeCountry = (e) => {
    setCountry(e.target.value);
    const restrictions = {
      country: e.target.value
    };

    autoComplete.setComponentRestrictions(restrictions);
  };

  const handleChangeRetailer = (e) => {
    setRetailer(e.target.value);
  }

  const detailRetailer = PANEL_PROVIDER[retailer];

  return (
    <div className={styles.container}>
      <Head>
        <title>You are my sunshine</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Container maxWidth="md" component="main">
        <Paper elevation={0}>
          <Box sx={{ border: 1, borderRadius: 1, px: 2, py: 4, borderColor: '#dadce0' }}>
            <Box sx={{ px: 2 }}>
              <Typography variant="h6" component="h6">
                Enter information
              </Typography>

              <Typography variant="subtitle2" component="p" sx={{ fontStyle: 'italic', fontWeight: 'normal' }}>
                to estimate your solar plan
              </Typography>
            </Box>

            <Grid container spacing={2}>
              <Grid item xs={isAboveSm ? 6 : 12}>
                <CardContent>
                  <Box sx={{ mt: 4 }}>
                    <Grid container spacing={2}>
                      <Grid item xs={6}>
                        <FormControl size="small" fullWidth>
                          <InputLabel id="demo-simple-select-autowidth-label">Country</InputLabel>
                          <Select
                            labelId="demo-simple-select-autowidth-label"
                            id="demo-simple-select-autowidth"
                            autoWidth
                            label="Country"
                            value={country}
                            onChange={handleChangeCountry}
                          >
                            <MenuItem value="">
                              <em>None</em>
                            </MenuItem>
                            {COUNTRIES.map((item) => (
                              <MenuItem key={item.code} value={item.code}>
                                {item.name}
                              </MenuItem>
                            ))}
                          </Select>
                        </FormControl>
                      </Grid>

                      <Grid item xs={6}>
                        <TextField {...inputProps} label="Zip Code" />
                      </Grid>
                    </Grid>
                  </Box>

                  <Box sx={{ mt: 4 }}>
                    <TextField id={addressId} {...inputProps} label="Home Address" />
                  </Box>

                  <Box sx={{ mt: 4 }}>
                    <FormControl size="small" fullWidth>
                      <InputLabel id="demo-simple-select-autowidth-label">Solar Panel Provider *</InputLabel>
                      <Select
                        labelId="demo-simple-select-autowidth-label"
                        id="demo-simple-select-autowidth"
                        autoWidth
                        required
                        label="Electricity Retailer"
                        value={retailer}
                        onChange={handleChangeRetailer}
                      >
                        <MenuItem value="">
                          <em>None</em>
                        </MenuItem>
                        {SOLAR_PANEL_PROVIDERS.map((item) => (
                          <MenuItem key={item.code} value={item.code}>
                            {item.name}
                          </MenuItem>
                        ))}
                      </Select>

                      {
                        detailRetailer &&
                        <>
                          <FormHelperText>Installation cost: {detailRetailer.price} / m<sup>2</sup></FormHelperText>
                          <FormHelperText>Maintenance cost: {detailRetailer.monthlyBill} / m<sup>2</sup></FormHelperText>
                        </>
                      }
                    </FormControl>
                  </Box>

                  <Box sx={{ mt: 4 }}>
                    <TextField
                      {...inputProps}
                      label="Average Electric Bill"
                      InputProps={{
                        startAdornment: <InputAdornment position="start">$</InputAdornment>,
                        endAdornment: <InputAdornment position="end">/mo</InputAdornment>,
                      }}
                    />
                  </Box>
                </CardContent>

                <CardActions sx={{ justifyContent: 'flex-end' }}>
                  <Button variant="contained">
                    Next
                  </Button>
                </CardActions>
              </Grid>

              {isAboveSm && (
                <Grid item xs={6}>
                  <Box sx={{ display: 'flex', justifyContent: 'center', alignContent: 'center' }}>
                    <Image src="/images/solar.png" width={250} height={250} alt="you are my sunshine" />
                  </Box>
                </Grid>
              )}
            </Grid>
          </Box>
        </Paper>
      </Container>
    </div>
  );
};

export default Home;
